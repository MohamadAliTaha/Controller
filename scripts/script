#!/usr/bin/env python

from useful import ping_mcu, ping_odroid, emergency_stop, Header
from mcu_control.msg._ThermistorTemps import ThermistorTemps
from mcu_control.msg._Currents import Currents
from mcu_control.msg._Voltage import Voltage
from PyQt5 import QtWidgets, QtCore
from controller import Controller
from pynput import keyboard
from arm import Arm
from pds import Pds
import threading
import rospy


def on_press(function, tab_name: str, args=[]):
    if tab_name == "controller":
        if not controller.log_browser.line_edit_has_focus():
            function(tab_name, *args) if args else function(tab_name)
    elif tab_name == "arm":
        if not arm.log_browser.line_edit_has_focus():
            function(tab_name, *args) if args else function(tab_name)
    elif tab_name == "pds":
        if not pds.log_browser.line_edit_has_focus():
            function(tab_name, *args) if args else function(tab_name)


class Key_capture_thread(threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.tab_name = ""
        self.threadID = threadID
        self.name = name

    def list_commands(self, tab_name: str):
        if tab_name == "controller":
            controller.list_commands()
        elif tab_name == "arm":
            arm.list_commands()
        elif tab_name == "pds":
            pds.list_commands()

    def run(self):
        hotkeys = {
            "<ctrl>+p":
            lambda: on_press(ping_mcu, self.tab_name[:-4]),
            "<alt>+p":
            lambda: on_press(ping_odroid, self.tab_name[:-4]),
            "q":
            lambda: on_press(emergency_stop, self.tab_name[:-4]),
            "l":
            lambda: on_press(self.list_commands, self.tab_name[:-4]),
            "u":
            lambda: on_press(controller.change_throttle, self.tab_name[:-4],
                             ["+"]),
            "i":
            lambda: on_press(controller.change_throttle, self.tab_name[:-4],
                             ["-"]),
            "o":
            lambda: on_press(arm.reset_angles, self.tab_name[:-4]),
            # "w": lambda: on_press(controller.controller_up.click),
            # "a": lambda: on_press(controller.controller_left.click),
            # "s": lambda: on_press(controller.controller_down.click),
            # "d": lambda: on_press(controller.controller_right.click),
        }

        self.tab_name = tab_widget.currentWidget().objectName()

        def send_command(key: keyboard.Key):
            self.tab_name = tab_widget.currentWidget().objectName()
            if key == keyboard.Key.enter:
                if self.tab_name == "controller_tab":
                    controller.log_browser.run_command()
                elif self.tab_name == "arm_tab":
                    arm.log_browser.run_command()
                elif self.tab_name == "pds_tab":
                    pds.log_browser.run_command()

        with keyboard.GlobalHotKeys(hotkeys) as hotkey_listener:
            with keyboard.Listener(on_press=send_command) as enter_listener:
                enter_listener.join()
                hotkey_listener.join()


class Ros_thread(threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.subbed_topics = []

        self.controller_topics = ([
            "wheel_motor_currents", Currents, controller.display_currents
        ], )
        self.arm_topics = ()
        self.pds_topics = ()

    def subscribe_to_topics(self, page_index: int):
        """Called on tab change to unsub to old topics and 
        replace them with the ones needed for the new tab"""

        topic_names = [
            self.controller_topics, self.arm_topics, self.pds_topics
        ]

        for i in reversed(range(len(self.subbed_topics))):
            self.subbed_topics[i].unregister()  # unsubs to all previous topics
            self.subbed_topics.pop()
        for topic in topic_names[page_index]:
            self.subbed_topics.append(
                rospy.Subscriber(*topic))  # subcs to new page topics

    def run(self):
        # these 2 topics are needed for all tabs since they are used outside the tab widget
        battery_temps = rospy.Subscriber("battery_temps", ThermistorTemps,
                                         header.update_temps)
        battery_voltage = rospy.Subscriber("battery_voltage", Voltage,
                                           header.update_voltage)

        self.subscribe_to_topics(
            0
        )  # subs to controller topics so we dont't have to wait for tab change at the beginning


if __name__ == '__main__':
    import sys

    rospy.init_node("gui_controller", anonymous=True)

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setObjectName("MainWindow")
    controller_tab = QtWidgets.QWidget()
    arm_tab = QtWidgets.QWidget()
    pds_tab = QtWidgets.QWidget()

    # used for adaptive window size, gets the screen size of the current display
    screen = QtWidgets.QDesktopWidget().screenGeometry(-1)
    width = screen.width()  # 1920 x 1080 for me
    height = screen.height()
    MainWindow.resize(width, height)
    MainWindow.setStyleSheet("background-color: rgb(43, 52, 59);\n"
                             "/*border-color: rgb(238, 238, 236);*/\n"
                             "color: rgb(238, 238, 236);")

    controller = Controller(width, height, controller_tab)
    arm = Arm(width, height, arm_tab)
    pds = Pds(width, height, pds_tab)

    centralWidget = QtWidgets.QWidget(MainWindow)
    centralWidget.setObjectName("centralwidget")

    header = Header(width, height, centralWidget)
    header.setup()

    tab_widget = QtWidgets.QTabWidget(centralWidget)
    tab_widget.setGeometry(QtCore.QRect(0, 70, width, 0.937 * height - 70))

    controller_tab.setObjectName("controller_tab")
    arm_tab.setObjectName("arm_tab")
    pds_tab.setObjectName("pds_tab")

    controller.setupUi(MainWindow)
    controller.start_handling_clicks()
    arm.setupUi(MainWindow)
    arm.start_handling_clicks()
    pds.setupUi(MainWindow)

    tab_widget.addTab(controller_tab, "Controller")
    tab_widget.addTab(arm_tab, "Arm")
    tab_widget.addTab(pds_tab, "PDS")

    MainWindow.setCentralWidget(centralWidget)
    keyboard_thread = Key_capture_thread(1, "key-capture-thread")
    keyboard_thread.start()
    ros_thread = Ros_thread(2, "ros-thread")
    ros_thread.start()

    MainWindow.setWindowTitle("Rover Controller")
    MainWindow.show()

    tab_widget.currentChanged.connect(ros_thread.subscribe_to_topics)

    sys.exit(app.exec_())
