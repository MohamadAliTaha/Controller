#!/usr/bin/env python

import subprocess
import threading

import rosnode
import rospy
from mcu_control.msg._Currents import Currents
from mcu_control.msg._ThermistorTemps import ThermistorTemps
from mcu_control.msg._Voltage import Voltage
from PyQt5 import QtCore, QtGui, QtWidgets
from sensor_msgs.msg import Image
from std_msgs.msg import String

from helpers import Header, Queue
from pages.arm import Arm
from pages.cams import Cams
from pages.pds import Pds
from pages.science import Science
from pages.wheel import Wheel


class Worker(threading.Thread):
    def __init__(self, threadID: int, name: str):
        threading.Thread.__init__(self)
        self.threadID: int = threadID
        self.name: str = name
        self.daemon: bool = True  # close with parent
        self.command_queue = Queue(10)

    def clear_queue(self):
        self.command_queue.clear()

    def add_to_queue(self, data):
        self.command_queue.append(data)

    def run(self):
        queue = self.command_queue.get_list()
        while not rospy.is_shutdown():
            try:
                if queue:
                    queue[0][0](*queue[0][1]) if queue[0][1] else queue[0][0]()
                    queue.pop(0)
                    rospy.sleep(0.01)
            except:
                pass


class Ros_thread(threading.Thread):
    def __init__(self, threadID: int, name: str):
        threading.Thread.__init__(self)
        self.threadID: int = threadID
        self.name: str = name
        self.daemon: bool = True
        self.subbed_topics: list[rospy.Subscriber] = []

        # each item in this tuple is a collection of all topics needed for the according page
        # each item (topic) in said collection is a tuple that contains the arguments needed for the Subscriber method
        # the lambda function used appends the passed function and its args to the Worker thread's Queue so they are run in order
        self.topics = (
            [
                (
                    "wheel_motor_currents",
                    Currents,
                    lambda data: worker.add_to_queue((wheel.display_currents, [data])),
                ),
                (
                    # "cv_camera/image_raw",  # for testing
                    "video1/image_raw",
                    Image,
                    wheel.display_stream,
                ),
            ],  # wheel topics
            [
                (
                    "arm_motor_currents",
                    Currents,
                    lambda data: worker.add_to_queue((arm.display_currents, [data])),
                ),
            ],  # arm topics
            [
                (
                    "wheel_motor_currents",
                    Currents,
                    lambda data: worker.add_to_queue((pds.display_wheel_currents, [data])),
                ),
                (
                    "arm_motor_currents",
                    Currents,
                    lambda data: worker.add_to_queue((pds.display_arm_currents, [data])),
                ),
            ],  # pds topics
            [],  # science topics
            [
                (
                    # "cv_camera/image_raw",  # for testing
                    "video1/image_raw",
                    Image,
                    lambda data: worker.add_to_queue((cams.display_stream1, [data])),
                ),
                (
                    # "cv_camera/image_raw",  # for testing
                    "video2/image_raw",
                    Image,
                    lambda data: worker.add_to_queue((cams.display_stream2, [data])),
                ),
                (
                    # "cv_camera/image_raw",  # for testing
                    "video3/image_raw",
                    Image,
                    lambda data: worker.add_to_queue((cams.display_stream3, [data])),
                ),
                (
                    # "cv_camera/image_raw",  # for testing
                    "video4/image_raw",
                    Image,
                    lambda data: worker.add_to_queue((cams.display_stream4, [data])),
                ),
            ],  # cams topics
        )

    def handle_tab_change(self, page_index: int):
        """Called on tab change to unsub to old topics and
        replace them with the ones needed for the new tab"""

        for i in reversed(range(len(self.subbed_topics))):
            self.subbed_topics[i].unregister()  # unsubs to all previous topics
            self.subbed_topics.pop()
        worker.clear_queue()
        for topic in self.topics[page_index]:
            self.subbed_topics.append(rospy.Subscriber(*topic, queue_size=1))  # subs to new page topics

    def run(self):
        # these 2 topics are needed for all tabs since they are used outside the tab widget
        self.battery_temps = rospy.Subscriber(
            "battery_temps",
            ThermistorTemps,
            lambda data: worker.add_to_queue((header.update_temps, [data])),
            queue_size=1,
        )
        self.battery_voltage = rospy.Subscriber(
            "battery_voltage",
            Voltage,
            lambda data: worker.add_to_queue((header.update_voltage, [data])),
            queue_size=1,
        )

        self.handle_tab_change(
            0
        )  # 0 just signifies the topics of the first tab since this is the first tab displayed


class MainWindowClass(QtWidgets.QMainWindow, QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.pressed_keys: list[str] = []
        self.tab_name: str = ""

        self.ping_odroid_sequence = QtWidgets.QShortcut(QtGui.QKeySequence("alt+p"), self)
        self.ping_odroid_sequence.activated.connect(
            lambda: threading.Thread(name="ping_odroid", target=self.ping_odroid).start()
        )
        self.setFocus()

    def ping_odroid(self):
        tab: QtWidgets.QWidget = tab_widget.currentWidget().objectName()
        output: str = (
            subprocess.Popen(
                ["rosrun", "ping_acknowledgment", "ping_response_client.py"], stdout=subprocess.PIPE
            )
            .stdout.read()
            .decode("utf-8")
        )
        exec(f"worker.add_to_queue(({tab}.log_browser.append_to_browser, [output]))")

    def focusOutEvent(self, event: QtGui.QFocusEvent) -> None:
        self.pressed_keys.clear()  # clears all velocity and speed values that keyReleaseEvent didnt catch because of the window change
        wheel.reset_velocity()
        arm.reset_speeds()
        return super().focusOutEvent(event)

    def keyPressEvent(self, event: QtGui.QKeyEvent) -> None:
        if event.isAutoRepeat():
            return  # this prevents the press and release events from continuously firing

        self.tab_name: str = tab_widget.currentWidget().objectName()
        key: str = event.text()

        if self.tab_name == "wheel" and not wheel.log_browser.line_edit.hasFocus():
            keys = ["d", "w", "a", "s"]
            if key in keys:
                self.pressed_keys.append(key)
                wheel.set_page_buttons(False)
                for i in range(int(len(keys) / 2)):
                    if key == keys[i]:
                        wheel.velocity[i] += wheel.throttle
                    elif key == keys[i + int(len(keys) / 2)]:
                        wheel.velocity[i] -= wheel.throttle
                wheel.send_velocity()
        elif self.tab_name == "arm" and not arm.log_browser.line_edit.hasFocus():
            keys = ["w", "e", "r", "t", "y", "u", "s", "d", "f", "g", "h", "j"]
            if key in keys:
                self.pressed_keys.append(key)
                arm.manual_controls_button.setChecked(True)
                arm.set_page_buttons(False)
                for i in range(int(len(keys) / 2)):
                    if key == keys[i]:
                        arm.speeds[i] += arm.speed_multiplier * 50  # mapped to between -250 and 250
                    elif key == keys[i + int(len(keys) / 2)]:
                        arm.speeds[i] -= arm.speed_multiplier * 50
                arm.send_speeds()

        return super().keyPressEvent(event)

    def keyReleaseEvent(self, event: QtGui.QKeyEvent) -> None:
        if event.isAutoRepeat():
            return

        key: str = event.text()

        try:
            if self.tab_name == "wheel" and not wheel.log_browser.line_edit.hasFocus():
                keys = ["d", "w", "a", "s"]
                if key in keys:
                    self.pressed_keys.remove(key)
                    for i in range(int(len(keys) / 2)):
                        if key == keys[i]:
                            wheel.velocity[i] -= wheel.throttle
                        elif key == keys[i + int(len(keys) / 2)]:
                            wheel.velocity[i] += wheel.throttle
                    wheel.send_velocity()
                    if not any(self.pressed_keys):
                        wheel.set_page_buttons(True)
            elif self.tab_name == "arm" and not arm.log_browser.line_edit.hasFocus():
                keys = ["w", "e", "r", "t", "y", "u", "s", "d", "f", "g", "h", "j"]
                if key in keys:
                    self.pressed_keys.remove(key)
                    for i in range(int(len(keys) / 2)):
                        if key == keys[i]:
                            arm.speeds[i] -= arm.speed_multiplier * 50
                        elif key == keys[i + int(len(keys) / 2)]:
                            arm.speeds[i] += arm.speed_multiplier * 50
                    arm.send_speeds()
                    if not any(self.pressed_keys):
                        arm.set_page_buttons(True)
        except ValueError:
            pass

        return super().keyReleaseEvent(event)


if __name__ == "__main__":
    # import debugpy

    # debugpy.listen(5678)  # This area helps attach a debugger to the scipt to help with testing when needed
    # debugpy.wait_for_client()

    import sys

    rospy.init_node("gui_controller")

    worker = Worker(1, "worker")

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = MainWindowClass()
    MainWindow.setObjectName("MainWindow")

    # used for adaptive window size, gets the screen size of the current display
    width, height = QtWidgets.QDesktopWidget().screenGeometry(-1).getRect()[2:]
    MainWindow.resize(width, height)
    MainWindow.setStyleSheet("background-color: rgb(43, 52, 59);\n" "color: rgb(238, 238, 236);")

    scroll_area = QtWidgets.QScrollArea(MainWindow)
    scroll_area.setGeometry(QtCore.QRect(0, 0, width, int(0.87 * height)))
    scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
    scroll_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
    scroll_area.setWidgetResizable(True)
    # scroll_area.setMinimumSize(width, height)

    MainWindow.setCentralWidget(scroll_area)

    wheel_tab = QtWidgets.QWidget()
    arm_tab = QtWidgets.QWidget()
    pds_tab = QtWidgets.QWidget()
    science_tab = QtWidgets.QWidget()
    cams_tab = QtWidgets.QWidget()

    pds_publisher = rospy.Publisher("/pds_command", String, queue_size=10)

    wheel = Wheel(
        width,
        height,
        rospy.Publisher("/rover_command", String, queue_size=10),
        pds_publisher,
        wheel_tab,
        MainWindow,
    )
    arm = Arm(
        width,
        height,
        rospy.Publisher("/arm_command", String, queue_size=10),
        pds_publisher,
        arm_tab,
        MainWindow,
    )
    pds = Pds(width, height, pds_publisher, pds_tab, MainWindow)
    science = Science(
        width, height, rospy.Publisher("/science_command", String, queue_size=10), science_tab, MainWindow
    )
    cams = Cams(width, height, cams_tab, MainWindow)

    layout = QtWidgets.QWidget()
    scroll_area.setWidget(layout)

    header = Header(width, height, layout)
    header.setup()

    tab_widget = QtWidgets.QTabWidget(layout)
    tab_widget.setGeometry(QtCore.QRect(0, int(height / 15.43), width, int(0.9 * height)))

    wheel_tab.setObjectName("wheel")
    arm_tab.setObjectName("arm")
    pds_tab.setObjectName("pds")
    science_tab.setObjectName("science")
    cams_tab.setObjectName("cams")

    tab_widget.addTab(wheel_tab, "Wheels")
    tab_widget.addTab(arm_tab, "Arms")
    tab_widget.addTab(pds_tab, "PDS")
    tab_widget.addTab(science_tab, "Science")
    tab_widget.addTab(cams_tab, "Cams")

    ros_thread = Ros_thread(2, "ros-thread")
    tab_widget.currentChanged.connect(ros_thread.handle_tab_change)

    MainWindow.setWindowTitle("Rover Controller")
    MainWindow.show()

    ros_thread.start()
    worker.start()

    try:
        sys.exit(app.exec_())
    except:
        if ["/joy_comms"] in rosnode.get_node_names():
            subprocess.Popen(["rosnode", "kill", "/joy_comms"], stdout=subprocess.PIPE)
        worker.clear_queue()
