#!/usr/bin/env python

from useful import ping_mcu, ping_odroid, emergency_stop, Header
from mcu_control.msg._ThermistorTemps import ThermistorTemps
from mcu_control.msg._Currents import Currents
from mcu_control.msg._Voltage import Voltage
from PyQt5 import QtWidgets, QtCore
from pages.controller import Controller
from pages.science import Science
from pynput import keyboard
from pages.arm import Arm
from pages.pds import Pds
import threading
import rospy
from time import sleep


def on_press(function, tab_name: str, args=[]):
    if not tabs[tab_name].log_browser.line_edit.hasFocus():
        function(tab_name, *args) if args else function(tab_name)


class Key_capture_thread(threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.tab_name = ""
        self.threadID = threadID
        self.name = name

    def list_commands(self, tab_name: str):
        tabs[tab_name].list_commands()

    def run(self):
        hotkeys = {
            "<ctrl>+p":
            lambda: on_press(ping_mcu, self.tab_name),
            "<alt>+p":
            lambda: on_press(ping_odroid, self.tab_name),
            "q":
            lambda: on_press(emergency_stop, self.tab_name),
            "l":
            lambda: on_press(self.list_commands, self.tab_name),
            "u":
            lambda: on_press(controller.change_throttle, self.tab_name, ["+"]),
            "i":
            lambda: on_press(controller.change_throttle, self.tab_name, ["-"]),
            "o":
            lambda: on_press(arm.reset_angles, self.tab_name),
            "<ctrl>+<shift>+r":
            lambda: on_press(pds.toggle_all_motors, self.tab_name),
            # "a": lambda: on_press(controller.controller_left.click),
            # "s": lambda: on_press(controller.controller_down.click),
            # "d": lambda: on_press(controller.controller_right.click),
        }

        self.tab_name = tab_widget.currentWidget().objectName()

        def send_command(key: keyboard.Key):
            self.tab_name = tab_widget.currentWidget().objectName()
            if key == keyboard.Key.enter:
                if self.tab_name == "pds" and not pds.fan1_speed_input.hasFocus(
                ) and not pds.fan2_speed_input.hasFocus():
                    pds.log_browser.run_command()
                else:
                    tabs[self.tab_name].log_browser.run_command()

        with keyboard.GlobalHotKeys(hotkeys) as hotkey_listener:
            with keyboard.Listener(on_press=send_command) as enter_listener:
                enter_listener.join()
                hotkey_listener.join()


class Ros_thread(threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.subbed_topics = []

        # each item in this tuple is a collection of all topics needed for the according page
        # each item (topic) in said collection is a tuple that contains the arguments needed for the Subscriber method
        self.topics = (
            [
                ("wheel_motor_currents", Currents,
                 controller.display_currents),
            ],  # wheel topics
            [],  # arm topics
            [
                ("wheel_motor_currents", Currents, pds.display_currents),
            ],  # pds topics
            [],  # science topics
        )

    def subscribe_to_topics(self, page_index: int):
        """Called on tab change to unsub to old topics and 
        replace them with the ones needed for the new tab"""

        for i in reversed(range(len(self.subbed_topics))):
            self.subbed_topics[i].unregister()  # unsubs to all previous topics
            self.subbed_topics.pop()
        for topic in self.topics[page_index]:
            print(topic)
            self.subbed_topics.append(
                rospy.Subscriber(*topic))  # subs to new page topics

    def run(self):
        # these 2 topics are needed for all tabs since they are used outside the tab widget
        battery_temps = rospy.Subscriber("battery_temps", ThermistorTemps,
                                         header.update_temps)
        battery_voltage = rospy.Subscriber("battery_voltage", Voltage,
                                           header.update_voltage)

        self.subscribe_to_topics(
            0  # 0 just signifies the topics of the first tab since this is the first tab displayed
        )

        while True:
            print(controller.velocity)
            sleep(1)


if __name__ == '__main__':
    import sys

    rospy.init_node("gui_controller", anonymous=True)

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setObjectName("MainWindow")

    # used for adaptive window size, gets the screen size of the current display
    screen = QtWidgets.QDesktopWidget().screenGeometry(-1)
    width = screen.width()  # 1920 x 1080 for me
    height = screen.height()
    MainWindow.resize(width, height)
    MainWindow.setStyleSheet("background-color: rgb(43, 52, 59);\n"
                             "/*border-color: rgb(238, 238, 236);*/\n"
                             "color: rgb(238, 238, 236);")

    controller_tab = QtWidgets.QWidget()
    arm_tab = QtWidgets.QWidget()
    pds_tab = QtWidgets.QWidget()
    science_tab = QtWidgets.QWidget()

    controller = Controller(width, height, controller_tab)
    arm = Arm(width, height, arm_tab)
    pds = Pds(width, height, pds_tab)
    science = Science(width, height, science_tab)

    global tabs
    tabs = {
        "controller": controller,
        "arm": arm,
        "pds": pds,
        "science": science,
    }

    centralWidget = QtWidgets.QWidget(MainWindow)
    centralWidget.setObjectName("centralwidget")

    header = Header(width, height, centralWidget)
    header.setup()

    tab_widget = QtWidgets.QTabWidget(centralWidget)
    tab_widget.setGeometry(QtCore.QRect(0, 70, width, 0.87 * height))

    controller_tab.setObjectName("controller")
    arm_tab.setObjectName("arm")
    pds_tab.setObjectName("pds")
    science_tab.setObjectName("science")

    controller.setupUi(MainWindow)
    arm.setupUi(MainWindow)
    pds.setupUi(MainWindow)
    science.setupUi(MainWindow)
    controller.start_handling_clicks()
    arm.start_handling_clicks()
    pds.start_handling_clicks()
    science.start_handling_clicks()

    tab_widget.addTab(controller_tab, "Controller")
    tab_widget.addTab(arm_tab, "Arm")
    tab_widget.addTab(pds_tab, "PDS")
    tab_widget.addTab(science_tab, "Science")

    MainWindow.setCentralWidget(centralWidget)
    keyboard_thread = Key_capture_thread(1, "key-capture-thread")
    keyboard_thread.start()
    ros_thread = Ros_thread(2, "ros-thread")
    ros_thread.start()

    MainWindow.setWindowTitle("Rover Controller")
    MainWindow.show()

    tab_widget.currentChanged.connect(ros_thread.subscribe_to_topics)

    sys.exit(app.exec_())
