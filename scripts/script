#!/usr/bin/env python

from useful import Header
from mcu_control.msg._ThermistorTemps import ThermistorTemps
from mcu_control.msg._Currents import Currents
from mcu_control.msg._Voltage import Voltage
from PyQt5 import QtWidgets, QtCore
from pages.controller import Controller
from pages.science import Science
from pages.arm import Arm
from pages.pds import Pds
import threading
import rospy


class Ros_thread(threading.Thread):

    def __init__(self, threadID: int, name: str):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.subbed_topics = []

        # each item in this tuple is a collection of all topics needed for the according page
        # each item (topic) in said collection is a tuple that contains the arguments needed for the Subscriber method
        self.topics = (
            [
                ("wheel_motor_currents", Currents,
                 controller.display_currents),
            ],  # wheel topics
            [
                ("arm_motor_currents", Currents, arm.display_currents),
            ],  # arm topics
            [
                ("wheel_motor_currents", Currents, pds.display_currents),
            ],  # pds topics
            [],  # science topics
        )

    def subscribe_to_topics(self, page_index: int):
        """Called on tab change to unsub to old topics and 
        replace them with the ones needed for the new tab"""

        for i in reversed(range(len(self.subbed_topics))):
            self.subbed_topics[i].unregister()  # unsubs to all previous topics
            self.subbed_topics.pop()
        for topic in self.topics[page_index]:
            self.subbed_topics.append(
                rospy.Subscriber(*topic))  # subs to new page topics

    def unregister_all(self):
        self.battery_temps.unregister()
        self.battery_voltage.unregister()
        for i in reversed(range(len(self.subbed_topics))):
            self.subbed_topics[i].unregister()
            self.subbed_topics.pop()

    def run(self):
        # these 2 topics are needed for all tabs since they are used outside the tab widget
        self.battery_temps = rospy.Subscriber("battery_temps", ThermistorTemps,
                                              header.update_temps)
        self.battery_voltage = rospy.Subscriber("battery_voltage", Voltage,
                                                header.update_voltage)

        self.subscribe_to_topics(
            0  # 0 just signifies the topics of the first tab since this is the first tab displayed
        )


if __name__ == '__main__':
    import sys

    rospy.init_node("gui_controller", anonymous=True)

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QWidget()
    MainWindow.setObjectName("MainWindow")

    # used for adaptive window size, gets the screen size of the current display
    screen = QtWidgets.QDesktopWidget().screenGeometry(-1)
    width = screen.width()  # 1920 x 1080 for me
    height = screen.height()
    MainWindow.resize(width, height)
    MainWindow.setStyleSheet("background-color: rgb(43, 52, 59);\n"
                             "color: rgb(238, 238, 236);")

    controller_tab = QtWidgets.QWidget()
    arm_tab = QtWidgets.QWidget()
    pds_tab = QtWidgets.QWidget()
    science_tab = QtWidgets.QWidget()

    controller = Controller(width, height, controller_tab)
    arm = Arm(width, height, arm_tab)
    pds = Pds(width, height, pds_tab)
    science = Science(width, height, science_tab)

    global tabs
    tabs = {
        "controller": controller,
        "arm": arm,
        "pds": pds,
        "science": science,
    }

    header = Header(width, height, MainWindow)
    header.setup()

    tab_widget = QtWidgets.QTabWidget(MainWindow)
    tab_widget.setGeometry(QtCore.QRect(0, 70, width, 0.87 * height))

    controller_tab.setObjectName("controller")
    arm_tab.setObjectName("arm")
    pds_tab.setObjectName("pds")
    science_tab.setObjectName("science")

    controller.setupUi(MainWindow)
    arm.setupUi(MainWindow)
    pds.setupUi(MainWindow)
    science.setupUi(MainWindow)
    controller.start_handling_clicks()
    arm.start_handling_clicks()
    pds.start_handling_clicks()
    science.start_handling_clicks()

    tab_widget.addTab(controller_tab, "Controller")
    tab_widget.addTab(arm_tab, "Arm")
    tab_widget.addTab(pds_tab, "PDS")
    tab_widget.addTab(science_tab, "Science")

    ros_thread = Ros_thread(1, "ros-thread")
    ros_thread.start()

    MainWindow.setWindowTitle("Rover Controller")
    MainWindow.show()

    tab_widget.currentChanged.connect(ros_thread.subscribe_to_topics)

    def exit_():
        app.exec_()
        ros_thread.unregister_all()
        exit()

    sys.exit(exit_())
